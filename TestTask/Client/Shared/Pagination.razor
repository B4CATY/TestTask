<nav aria-label="Page navigation example">
    <ul class="pagination justify-content-center">
        @foreach (var link in links)
        {
            <li @onclick="@(() => SelectedPageInternal(link))"
                style="cursor: pointer;"
                class="page-item  @(link.Enabled ? null : "disabled") @(link.Active ? "active" : null)">
                <span class="page-link" href="#">@link.Text</span>
            </li>
        }
    </ul>
</nav>

@code {
    [Parameter] public int CurrentPage { get; set; } = 1;
    [Parameter] public int TotaPagesQuantity { get; set; }
    [Parameter] public int Radius { get; set; } = 3;
    [Parameter] public EventCallback<int> SelectedPage { get; set; }
    List<PaginationLinkModel> links;
    protected override void OnParametersSet()
    {
        LoadPages();
    }

    private async Task SelectedPageInternal(PaginationLinkModel link)
    {
        if (link.Page == CurrentPage)
            return;

        if (!link.Enabled)
            return;

        CurrentPage = link.Page;
        await SelectedPage.InvokeAsync(link.Page);
    }

    private void LoadPages()
    {
        links = new List<PaginationLinkModel>();
        var isPreviousPageLinkEnabled = CurrentPage != 1;
        var previousPage = CurrentPage - 1;
        links.Add(new PaginationLinkModel(previousPage, isPreviousPageLinkEnabled, "Previous"));

        for (int i = 1; i <= TotaPagesQuantity; i++)
        {
            if (i >= CurrentPage - Radius && i <= CurrentPage + Radius)
            {
                links.Add(new PaginationLinkModel(i) { Active = CurrentPage == i });
            }
        }

        var isNextPageLinkEnabled = CurrentPage != TotaPagesQuantity;
        var nextPage = CurrentPage + 1;
        links.Add(new PaginationLinkModel(nextPage, isNextPageLinkEnabled, "Next"));
    }

    class PaginationLinkModel
    {
        public PaginationLinkModel(int page)
            : this(page, true) { }

        public PaginationLinkModel(int page, bool enabled)
            : this(page, enabled, page.ToString())
        { }

        public PaginationLinkModel(int page, bool enabled, string text)
        {
            Page = page;
            Enabled = enabled;
            Text = text;
        }

        public string Text { get; set; }
        public int Page { get; set; }
        public bool Enabled { get; set; } = true;
        public bool Active { get; set; } = false;
    }
}