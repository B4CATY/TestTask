@page "/"
@using TestTask.Client.Repositories
@using TestTask.Shared
@inject HttpClient http
@inject IJSRuntime js
@using System.IO
@using System.Text.Json
@inject IParcerXmlClientRepository repository
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime



<EditForm Model="@linkModel" OnValidSubmit="SubmitForm">
    <DataAnnotationsValidator/>
    <div class="form-group row">
        
        <div class="col-sm-6">
            <label for="link">Enter Link</label>
            <InputText id="link" class="form-control " @bind-Value="linkModel.Link" />
            <ValidationMessage For="@( () => linkModel.Link )" />
            @switch (parsingState)
            {
                case ParsingState.InProcces:
                    <label class="text-secondary" for="link">In Procces</label>
                    break;
                case ParsingState.Error:
                    <label class="text-danger" for="link">Error parcing</label>
                    break;
                case ParsingState.Success:
                    <label class="text-success" for="link">Successful parcing</label>
                    break;
            }
        </div>
    </div>
    @if(disableButton)
    {
        <button type="submit" disabled class="btn btn-outline-primary disabled">Submit</button>
    }
    else
    {
        <button type="submit" class="btn btn-outline-primary">Submit</button>
    }

</EditForm>




<h3 style="margin-top:50px;" class="col-sm-12 text-center">Parcered Links From Bd</h3>
    <table class="table col-sm-12 m-3 align-content-center">
        <thead>
            <tr class="text-center">
                <th>Date Of Parce</th>
                <th>Link</th>
                <th>Min Time Parce</th>
                <th>Max Time Parce</th>
                <th>More Info</th>
            </tr>
        </thead>
        <tbody>

        @if(links == null)
        {
            <tr class="text-center" >

                    <td style="position:relative; top:7px;">Table Is Empty Now</td>
                </tr>
        }

        else{
            foreach (var link in links)
            {
               <tr class="text-center" >
                    <td style="position:relative; top:7px;">@link.DateOfParce</td>
                    <td style="position:relative; top:7px;">@link.Link</td>
                    <td style="position:relative; top:7px;">@link.MinTimeParce</td>
                    <td style="position:relative; top:7px;">@link.MaxTimeParce</td>
                    <td> 
                        <button class="btn btn-outline-secondary " value="@link.Id" @onclick="( () => ShowParcedLink(link.Id) )">Show</button>
                    </td>
                </tr>
            }
        }
        </tbody>
    </table>
    @if(totalPageQuantity > 1)
{
    <Pagination TotaPagesQuantity="totalPageQuantity" CurrentPage="currentPage" Radius="2"
        SelectedPage="SelectedPage">
</Pagination> 

}
@code {
    enum ParsingState
    {
        Nothing,
        InProcces,
        Error,
        Success
    }
    private List<LinkResponseModel> links;
    private LinkModel linkModel = new LinkModel();

    private ParsingState parsingState = ParsingState.Nothing;
    private bool disableButton = false;

    private int totalPageQuantity = 1;//10
    private int currentPage = 1;

    protected override async Task OnInitializedAsync() => await LoadLinksAsync();

    protected async Task LoadLinksAsync(int page = 1, int quantityPerPage = 5) 
    { 
        var httpResponse = await http.GetAsync($"ParcerXml/links?Page={currentPage}&PageSize={quantityPerPage}");
        if (httpResponse.IsSuccessStatusCode)
        {
            totalPageQuantity = int.Parse(httpResponse.Headers.GetValues("pagesQuantity").FirstOrDefault());
            var responseString = await httpResponse.Content.ReadAsStringAsync();
            links =  repository.LinksDeserialize(responseString);
        }
        else
            links = null;
    }

    private async Task SelectedPage(int page)
    {
        currentPage = page;
        await LoadLinksAsync(page);
    }

    void ShowParcedLink(int id) => NavigationManager.NavigateTo($"{id}");

    protected async Task SubmitForm()
    {
        Console.WriteLine(linkModel.Link);

        disableButton = true;
        parsingState = ParsingState.InProcces;
        var result = await repository.Parce(linkModel);

        linkModel.Link = string.Empty;
        
        if (result)
             parsingState = ParsingState.Success;

        else
             parsingState = ParsingState.Error;
      
        disableButton = false;
        await LoadLinksAsync();
        
        
    }

    

}
